{"version":3,"sources":["Input.js"],"names":["Input","useContext","Context","link","setLink","setQrImage","open","setOpen","color","setColor","bgcolor","setBgcolor","id","type","value","onChange","e","target","fullWidth","label","variant","onClick","slice","message","autoHideDuration","onClose"],"mappings":"qHAAA,8FAOO,SAASA,IAEZ,MAAyFC,qBAAWC,KAA9FC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,QAASC,EAArB,EAAqBA,WAAYC,EAAjC,EAAiCA,KAAMC,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,MAAOC,EAAvD,EAAuDA,SAAUC,EAAjE,EAAiEA,QAASC,EAA1E,EAA0EA,WAY1E,OAAQ,sBAAKC,GAAG,QAAR,UACJ,cAAC,IAAD,CACAC,KAAK,OACLC,MAAOX,EACPY,SAAU,SAAAC,GAAC,OAAIZ,EAAQY,EAAEC,OAAOH,QAChCI,WAAW,EACXC,MAAM,eACNC,QAAQ,aAER,uBAEA,kFACA,sBAAKR,GAAG,cAAR,UACI,2CACA,uBAAOC,KAAK,QAAQC,MAAON,EAAOO,SAAU,SAAAC,GAAC,OAAIP,EAASO,EAAEC,OAAOH,UACnE,uBACA,sDACA,uBAAOD,KAAK,QAAQC,MAAOJ,EAASK,SAAU,SAAAC,GAAC,OAAIL,EAAWK,EAAEC,OAAOH,aAE3E,uBACA,cAAC,IAAD,CAAQF,GAAG,iBAAiBQ,QAAQ,YAAYC,QAAS,WA3B7C,KAATlB,EACCI,GAAQ,GAERF,EAAW,oDAAD,OAAqDF,EAArD,oCAAqFK,EAAMc,MAAM,GAAjG,oBAAgHZ,EAAQY,MAAM,GAA9H,kCAwBd,sBACA,cAAC,IAAD,CAAUC,QAAQ,mBAAmBjB,KAAMA,EAAMkB,iBAAkB,IAAMC,QA/BzD,kBAAMlB,GAAQ","file":"static/js/5.aae313fa.chunk.js","sourcesContent":["import { Context } from './Contexts/Context';\n\nimport { useContext } from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nexport function Input(){\n\n    let { link, setLink, setQrImage, open, setOpen, color, setColor, bgcolor, setBgcolor } = useContext(Context);\n\n    const handleClose = () => setOpen(false);\n\n    function generateQrCode(){\n        if(link === \"\"){\n            setOpen(true);\n        } else {\n            setQrImage(`https://api.qrserver.com/v1/create-qr-code/?data=${link}&amp;&size=200x200&color=${color.slice(1,)}&bgcolor=${bgcolor.slice(1,)}&margin=1&qzone=2&format=svg`);\n        }\n    }\n\n    return (<div id=\"Input\">\n        <TextField \n        type='text'\n        value={link}\n        onChange={e => setLink(e.target.value)}\n        fullWidth={true}\n        label=\"Link or Text\"\n        variant=\"outlined\"\n        />\n        <br/>\n\n        <p>(Make sure Color is darker than Background Color)</p>\n        <div id=\"colorSelect\">\n            <label>Color:</label>\n            <input type=\"color\" value={color} onChange={e => setColor(e.target.value)}/>\n            <br/>\n            <label>Background Color:</label>\n            <input type=\"color\" value={bgcolor} onChange={e => setBgcolor(e.target.value)}/>\n        </div>\n        <br/>\n        <Button id=\"generateButton\" variant=\"contained\" onClick={() => generateQrCode()}>Generate</Button>\n        <Snackbar message=\"Please add input\" open={open} autoHideDuration={2000} onClose={handleClose}/>\n    </div>)\n}"],"sourceRoot":""}